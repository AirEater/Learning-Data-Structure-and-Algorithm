A variable holds 4 elements
1)name (identifier)
2)address value (where the computer physically stores the variable)
3)memory (how much value can the variable holds; we define a variable named 'C' and his data type is "char" so that the memory of this variable is 1)
4)data

Data type that stores datas:
i)   Primitive Data type                // eg. int a; float b; char c; double d;
ii)  User-defined type or structured    // eg. struct a{/*...*/}; class, which is defined by user and stores vary of datas
iii) Pointer data type                  // data type that stores address (pointer)

We define pointer by doing:
//...(skiped header ,namespace, int main())
int number = 10;
int* ptr;       // this means we created an pointer names "ptr" that can only stores integer data type address
ptr = &number;  // we assign the address of "number" to pointer "ptr"

//the below code is same as line 11 to 12, use one line instead of 2 line
/*
int* ptr = &number;
*/

pointer "ptr" now holds the address of "number"
as we want to see what's inside the pointer that we are pointing to
we can use '*' operator to dereference "ptr" as example below:

cout << *ptr; // this will display the value that stored in "number"

what if we have struct Person{/*...*/}; and we want to declare a pointer to a struct.
ans:
Person* ptr; // we declare a pointer that can only stores "Person" user-defined data type address

========================================================================================================================
example:

#include <iostream>
#include <cstring>
using namespace std;

struct Person{
  char name[20]; // 20 bytes
  float money; // 4 bytes
  Person* lover; // pointer size are 8 bytes in 64-bit system, 4 bytes in 32-bit system
}; // total size of Person is 32 bytes in 64-bit system, 28 bytes in 32-bit system

int main(){
  Person Alex; //to access member of structure we can use '.': Alex.money = 5.5;
  Person Jessica;
  strcpy(Alex.name, "Alex"); // Assign value to c string
  
  int a = 5;
  int *ptr1;
  Person *ptr2;

  ptr1 = &a; // assign value to pointer to see how pointer works
  ptr2 = &Alex;

  cout << "ptr1 address: " << reinterpret_cast<long long>(ptr1) << endl; // cast hexadecimal address to decimal to get a readable address
  cout << "ptr2 address: " << reinterpret_cast<long long>(ptr2) << endl << endl;

  cout << "ptr1: " << *ptr1 << endl;
  cout << "ptr2: " << (*ptr2).name << endl; // or do like then next line, the result will be same
  cout << "ptr2: " << ptr2->name << endl << endl; // -> is a shortcut for (*ptr2).name

  // Jessica is Alex's lover, and Alex is Jessica's lover
  Alex.lover = &Jessica;
  Jessica.lover = &Alex;
  cout << "Alex's Lover address(Jessica): " << reinterpret_cast<long long>(Alex.lover) << endl;
  cout << "Jessica's Lover address(Alex): " << reinterpret_cast<long long>(Jessica.lover) << endl;

  Person* address; // create a pointer to store address of Alex's lover(Jessica)
  address = Alex.lover; // this address is pointing to Jessica because Alex's lover is Jessica
  cout << "\"address\" address(Jessica)   : " << reinterpret_cast<long long>(address) << endl;
  address->money += 100; // give money to Alex's lover

  //by doing the same thing, we can do it in another way
  Alex.lover->money += 100;
  cout << endl << "Alex's lover money: " << Alex.lover->money << endl;

  return 0;
}

  
